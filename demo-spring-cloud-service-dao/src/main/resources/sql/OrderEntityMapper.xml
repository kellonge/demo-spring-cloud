<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kellonge.demo.spring.cloud.dao.mapper.OrderEntityMapper">
  <resultMap id="BaseResultMap" type="com.kellonge.demo.spring.cloud.bean.entities.OrderEntity">
    <id column="OrderId" jdbcType="BIGINT" property="orderId" />
    <result column="MerchantsId" jdbcType="BIGINT" property="merchantsId" />
    <result column="UserId" jdbcType="BIGINT" property="userId" />
    <result column="UserName" jdbcType="VARCHAR" property="userName" />
    <result column="UserIdentifyNo" jdbcType="VARCHAR" property="userIdentifyNo" />
    <result column="OrderNo" jdbcType="VARCHAR" property="orderNo" />
    <result column="OrderAmount" jdbcType="DECIMAL" property="orderAmount" />
    <result column="InterestFreePeriod" jdbcType="INTEGER" property="interestFreePeriod" />
    <result column="BonusPayAmount" jdbcType="DECIMAL" property="bonusPayAmount" />
    <result column="CreditPayAmount" jdbcType="DECIMAL" property="creditPayAmount" />
    <result column="OrderStatus" jdbcType="INTEGER" property="orderStatus" />
    <result column="MerchantsLoactionInfo" jdbcType="VARCHAR" property="merchantsLoactionInfo" />
    <result column="UserLocationInfo" jdbcType="VARCHAR" property="userLocationInfo" />
    <result column="IsReaded" jdbcType="BIT" property="isReaded" />
    <result column="CreateTime" jdbcType="TIMESTAMP" property="createTime" />
    <result column="LastModifyTime" jdbcType="TIMESTAMP" property="lastModifyTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  <choose>
                    <when test="criterion.isBinary">
                      and ${criterion.condition} unhex(#{criterion.value})
                    </when>
                    <otherwise>
                      and ${criterion.condition} #{criterion.value}
                    </otherwise>
                  </choose>
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    <choose>
                      <when test="criterion.isBinary">
                        unhex(#{listItem})
                      </when>
                      <otherwise>
                        #{listItem}
                      </otherwise>
                    </choose>
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  <choose>
                    <when test="criterion.isBinary">
                      and ${criterion.condition} unhex(#{criterion.value})
                    </when>
                    <otherwise>
                      and ${criterion.condition} #{criterion.value}
                    </otherwise>
                  </choose>
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    <choose>
                      <when test="criterion.isBinary">
                        unhex(#{listItem})
                      </when>
                      <otherwise>
                        #{listItem}
                      </otherwise>
                    </choose>
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    OrderId, MerchantsId, UserId, UserName, UserIdentifyNo, OrderNo, OrderAmount, InterestFreePeriod, 
    BonusPayAmount, CreditPayAmount, OrderStatus, MerchantsLoactionInfo, UserLocationInfo, 
    IsReaded, CreateTime, LastModifyTime
  </sql>
  <select id="selectByExample" parameterType="map" resultMap="BaseResultMap">
    select
    <if test="example.distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from T_Order
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    <if test="example.size != null">
      limit
      <if test="example.offset != null">
        #{example.offset},
      </if>
      #{example.size}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="map" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from T_Order
    where OrderId = #{orderId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="map">
    delete from T_Order
    where OrderId = #{orderId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="map">
    delete from T_Order
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="map">
    insert into T_Order (OrderId, MerchantsId, 
      UserId, UserName, UserIdentifyNo, 
      OrderNo, OrderAmount, InterestFreePeriod, 
      BonusPayAmount, CreditPayAmount, 
      OrderStatus, MerchantsLoactionInfo, 
      UserLocationInfo, IsReaded, CreateTime, 
      LastModifyTime)
    values (#{record.orderId,jdbcType=BIGINT}, #{record.merchantsId,jdbcType=BIGINT}, 
      #{record.userId,jdbcType=BIGINT}, #{record.userName,jdbcType=VARCHAR}, #{record.userIdentifyNo,jdbcType=VARCHAR}, 
      #{record.orderNo,jdbcType=VARCHAR}, #{record.orderAmount,jdbcType=DECIMAL}, #{record.interestFreePeriod,jdbcType=INTEGER}, 
      #{record.bonusPayAmount,jdbcType=DECIMAL}, #{record.creditPayAmount,jdbcType=DECIMAL}, 
      #{record.orderStatus,jdbcType=INTEGER}, #{record.merchantsLoactionInfo,jdbcType=VARCHAR}, 
      #{record.userLocationInfo,jdbcType=VARCHAR}, #{record.isReaded,jdbcType=BIT}, #{record.createTime,jdbcType=TIMESTAMP}, 
      #{record.lastModifyTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="map">
    insert into T_Order
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="record.orderId != null">
        OrderId,
      </if>
      <if test="record.merchantsId != null">
        MerchantsId,
      </if>
      <if test="record.userId != null">
        UserId,
      </if>
      <if test="record.userName != null">
        UserName,
      </if>
      <if test="record.userIdentifyNo != null">
        UserIdentifyNo,
      </if>
      <if test="record.orderNo != null">
        OrderNo,
      </if>
      <if test="record.orderAmount != null">
        OrderAmount,
      </if>
      <if test="record.interestFreePeriod != null">
        InterestFreePeriod,
      </if>
      <if test="record.bonusPayAmount != null">
        BonusPayAmount,
      </if>
      <if test="record.creditPayAmount != null">
        CreditPayAmount,
      </if>
      <if test="record.orderStatus != null">
        OrderStatus,
      </if>
      <if test="record.merchantsLoactionInfo != null">
        MerchantsLoactionInfo,
      </if>
      <if test="record.userLocationInfo != null">
        UserLocationInfo,
      </if>
      <if test="record.isReaded != null">
        IsReaded,
      </if>
      <if test="record.createTime != null">
        CreateTime,
      </if>
      <if test="record.lastModifyTime != null">
        LastModifyTime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="record.orderId != null">
        #{record.orderId,jdbcType=BIGINT},
      </if>
      <if test="record.merchantsId != null">
        #{record.merchantsId,jdbcType=BIGINT},
      </if>
      <if test="record.userId != null">
        #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.userName != null">
        #{record.userName,jdbcType=VARCHAR},
      </if>
      <if test="record.userIdentifyNo != null">
        #{record.userIdentifyNo,jdbcType=VARCHAR},
      </if>
      <if test="record.orderNo != null">
        #{record.orderNo,jdbcType=VARCHAR},
      </if>
      <if test="record.orderAmount != null">
        #{record.orderAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.interestFreePeriod != null">
        #{record.interestFreePeriod,jdbcType=INTEGER},
      </if>
      <if test="record.bonusPayAmount != null">
        #{record.bonusPayAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.creditPayAmount != null">
        #{record.creditPayAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.orderStatus != null">
        #{record.orderStatus,jdbcType=INTEGER},
      </if>
      <if test="record.merchantsLoactionInfo != null">
        #{record.merchantsLoactionInfo,jdbcType=VARCHAR},
      </if>
      <if test="record.userLocationInfo != null">
        #{record.userLocationInfo,jdbcType=VARCHAR},
      </if>
      <if test="record.isReaded != null">
        #{record.isReaded,jdbcType=BIT},
      </if>
      <if test="record.createTime != null">
        #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.lastModifyTime != null">
        #{record.lastModifyTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="map" resultType="java.lang.Integer">
    select count(*) from T_Order
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update T_Order
    <set>
      <if test="record.orderId != null">
        OrderId = #{record.orderId,jdbcType=BIGINT},
      </if>
      <if test="record.merchantsId != null">
        MerchantsId = #{record.merchantsId,jdbcType=BIGINT},
      </if>
      <if test="record.userId != null">
        UserId = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.userName != null">
        UserName = #{record.userName,jdbcType=VARCHAR},
      </if>
      <if test="record.userIdentifyNo != null">
        UserIdentifyNo = #{record.userIdentifyNo,jdbcType=VARCHAR},
      </if>
      <if test="record.orderNo != null">
        OrderNo = #{record.orderNo,jdbcType=VARCHAR},
      </if>
      <if test="record.orderAmount != null">
        OrderAmount = #{record.orderAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.interestFreePeriod != null">
        InterestFreePeriod = #{record.interestFreePeriod,jdbcType=INTEGER},
      </if>
      <if test="record.bonusPayAmount != null">
        BonusPayAmount = #{record.bonusPayAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.creditPayAmount != null">
        CreditPayAmount = #{record.creditPayAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.orderStatus != null">
        OrderStatus = #{record.orderStatus,jdbcType=INTEGER},
      </if>
      <if test="record.merchantsLoactionInfo != null">
        MerchantsLoactionInfo = #{record.merchantsLoactionInfo,jdbcType=VARCHAR},
      </if>
      <if test="record.userLocationInfo != null">
        UserLocationInfo = #{record.userLocationInfo,jdbcType=VARCHAR},
      </if>
      <if test="record.isReaded != null">
        IsReaded = #{record.isReaded,jdbcType=BIT},
      </if>
      <if test="record.createTime != null">
        CreateTime = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.lastModifyTime != null">
        LastModifyTime = #{record.lastModifyTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update T_Order
    set OrderId = #{record.orderId,jdbcType=BIGINT},
      MerchantsId = #{record.merchantsId,jdbcType=BIGINT},
      UserId = #{record.userId,jdbcType=BIGINT},
      UserName = #{record.userName,jdbcType=VARCHAR},
      UserIdentifyNo = #{record.userIdentifyNo,jdbcType=VARCHAR},
      OrderNo = #{record.orderNo,jdbcType=VARCHAR},
      OrderAmount = #{record.orderAmount,jdbcType=DECIMAL},
      InterestFreePeriod = #{record.interestFreePeriod,jdbcType=INTEGER},
      BonusPayAmount = #{record.bonusPayAmount,jdbcType=DECIMAL},
      CreditPayAmount = #{record.creditPayAmount,jdbcType=DECIMAL},
      OrderStatus = #{record.orderStatus,jdbcType=INTEGER},
      MerchantsLoactionInfo = #{record.merchantsLoactionInfo,jdbcType=VARCHAR},
      UserLocationInfo = #{record.userLocationInfo,jdbcType=VARCHAR},
      IsReaded = #{record.isReaded,jdbcType=BIT},
      CreateTime = #{record.createTime,jdbcType=TIMESTAMP},
      LastModifyTime = #{record.lastModifyTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="map">
    update T_Order
    <set>
      <if test="record.merchantsId != null">
        MerchantsId = #{record.merchantsId,jdbcType=BIGINT},
      </if>
      <if test="record.userId != null">
        UserId = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.userName != null">
        UserName = #{record.userName,jdbcType=VARCHAR},
      </if>
      <if test="record.userIdentifyNo != null">
        UserIdentifyNo = #{record.userIdentifyNo,jdbcType=VARCHAR},
      </if>
      <if test="record.orderNo != null">
        OrderNo = #{record.orderNo,jdbcType=VARCHAR},
      </if>
      <if test="record.orderAmount != null">
        OrderAmount = #{record.orderAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.interestFreePeriod != null">
        InterestFreePeriod = #{record.interestFreePeriod,jdbcType=INTEGER},
      </if>
      <if test="record.bonusPayAmount != null">
        BonusPayAmount = #{record.bonusPayAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.creditPayAmount != null">
        CreditPayAmount = #{record.creditPayAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.orderStatus != null">
        OrderStatus = #{record.orderStatus,jdbcType=INTEGER},
      </if>
      <if test="record.merchantsLoactionInfo != null">
        MerchantsLoactionInfo = #{record.merchantsLoactionInfo,jdbcType=VARCHAR},
      </if>
      <if test="record.userLocationInfo != null">
        UserLocationInfo = #{record.userLocationInfo,jdbcType=VARCHAR},
      </if>
      <if test="record.isReaded != null">
        IsReaded = #{record.isReaded,jdbcType=BIT},
      </if>
      <if test="record.createTime != null">
        CreateTime = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.lastModifyTime != null">
        LastModifyTime = #{record.lastModifyTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where OrderId = #{record.orderId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="map">
    update T_Order
    set MerchantsId = #{record.merchantsId,jdbcType=BIGINT},
      UserId = #{record.userId,jdbcType=BIGINT},
      UserName = #{record.userName,jdbcType=VARCHAR},
      UserIdentifyNo = #{record.userIdentifyNo,jdbcType=VARCHAR},
      OrderNo = #{record.orderNo,jdbcType=VARCHAR},
      OrderAmount = #{record.orderAmount,jdbcType=DECIMAL},
      InterestFreePeriod = #{record.interestFreePeriod,jdbcType=INTEGER},
      BonusPayAmount = #{record.bonusPayAmount,jdbcType=DECIMAL},
      CreditPayAmount = #{record.creditPayAmount,jdbcType=DECIMAL},
      OrderStatus = #{record.orderStatus,jdbcType=INTEGER},
      MerchantsLoactionInfo = #{record.merchantsLoactionInfo,jdbcType=VARCHAR},
      UserLocationInfo = #{record.userLocationInfo,jdbcType=VARCHAR},
      IsReaded = #{record.isReaded,jdbcType=BIT},
      CreateTime = #{record.createTime,jdbcType=TIMESTAMP},
      LastModifyTime = #{record.lastModifyTime,jdbcType=TIMESTAMP}
    where OrderId = #{record.orderId,jdbcType=BIGINT}
  </update>
</mapper>